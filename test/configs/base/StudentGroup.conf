# Configuration file for StudentGroup objects

# StudentGroups to be synchronised are selected in LDAP filter in master.conf
# Now, each group has a list of members
# Each member needs to be fetched one by one
#StudentGroup-load-references = true

# So we need the attribute(s) with the criteria
# for finding the members list them here
#StudentGroup-list-reference-attribute = member

StudentGroup-scim-url-endpoint = StudentGroups

StudentGroup-unique-identifier = entryUUID

# for relations such as StudentGroup we need to fetch
# multiple remote objects
# this json takes care of those relations.
# Source type and attribute are used to find the object, also
# the method.
# object: fetch the preloaded object
# ldap: fetch the object with ldap-filter provided
# either full dn without filter or set dn with filter is supported

# <type>-remote-relations
# local_attribute is the value to find the SchoolUnit
# ldap_base  is the base argument for an ldap search
# ldap_filter is the filter for an ldap search

# method object for finding an preloaded object, ldap is used to perform an ldap search
# remote attribute is used with method "object"

# Usage:
# for relational attributes in ldap is a full dn for one other object, when using that
# filter can be empty or (objectClass=*). The base will be substituted for the value in local attibute
# for releational attribute that is any form of value that can be used in a ldap filter, set
# a base and put the value in ${value} the value will be substiuted for the value in local attibute

# remote_attribute is used with method 'object'. It is the field to match the value in local_attribute with
StudentGroup-remote-relations = <?
{
    "relations": {
        "SchoolUnit": {
            "local_attribute": "owner",
            "remote_attribute": "entryDN",
            "ldap_base": "dc=kommunen,dc=se",
            "ldap_filter": "(entryDN=${value})",
	    "require": "true",
            "method": "ldap"
        },
        "Student": {
            "local_attribute": "member",
            "remote_attribute": "entryDN",
            "ldap_base": "${value}",
            "ldap_filter": "(employeeType=student)",
            "method": "ldap"
        },
        "Teacher": {
            "local_attribute": "member",
            "remote_attribute": "entryDN",
            "ldap_base": "${value}",
            "ldap_filter": "(employeeType=teacher)",
            "method": "ldap"
        }
    }
}
?>

# need this to find schoolunit, even though it's not displayed it self
StudentGroup-hidden-attributes = Teacher.entryUUID

# Filter out groups that have neither students nor teachers
StudentGroup-orphan-if-missing = Student Teacher

StudentGroup-scim-json-template = <?
{
  "schemas": [
    "urn:scim:schemas:extension:sis:school:1.0:StudentGroup"
  ],
  "externalId": "${entryUUID}",
  "displayName": "${cn}",
  "studentGroupType": "${l}",
  "owner": {
    "value": "${SchoolUnit.entryUUID}",
    "$ref": "SchoolUnits/${SchoolUnit.entryUUID}"
  },
  "studentMemberships": [
    ${for $uid in Student.entryUUID}
    {
      "value": "${$uid}",
      "$ref": "Users/${$uid}"
    },
    ${end}
  ]
}?>
