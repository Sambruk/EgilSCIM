#Configuration file for Activity objects

# A generated type
# This doesn't exist in the catalogue so it needs to be created on the fly.
# It is generated from one types repeated attribute e.g. StudentGroup.member
# Each StudentGroup member becomes an Activity.

Activity-scim-url-endpoint = Activities

#Activity-scim-dependency = StudentGroup Employment

Activity-is-generated = true

# The type to generate activities for,
# we generate one Activity per StudentGroup
Activity-generate-type = StudentGroup

# We need to find the other part, the Employment,
# to get the its GUID and the other info for it
Activity-remote-relation-id = Teacher.entryUUID

# Employment, unique identifier i.e. other part id
Activity-generate-remote-part = Employment.entryUUID

# SchoolUnit, unique identifier. i.e. this part id
# Activity is base on StudentGroup so "this" or "local" is the StudentGroup
# so Activity local relation id is StudentGroup and it's unique identifier, e.g. GUID
Activity-generate-local-part = StudentGroup.entryUUID

# name of the attribute holding the Activity unique id,
# this is used when creating the scim message below,
# (use GUID for consistency)
Activity-unique-identifier = entryUUID

# the 2 attributes used to generate this types unique id GUID
Activity-GUID-generation-ids = StudentGroup.entryUUID SchoolUnit.entryUUID

# Ett Activity object för varje StudentGroup (local)
# Activity.GUID är StudentGroup.GUID + SchoolUnit.GUID (finns SCB kod på studentgrupp)
# Varje StudentGroup har en lista StudentGroup.members
# Hämta Employment.GUID via StudentGroup.member
#   (hämta en och en) och hitta lärare på member namn i Employment

Activity-scim-json-template = <?
{
    "schemas": ["urn:scim:schemas:extension:sis:school:1.0:Activity"],
    "externalId": "${entryUUID}",
    "displayName": "${StudentGroup.displayName}-Activity",
    "owner": {
        "value": "${SchoolUnit.entryUUID}",
        "$ref": "SchoolUnits/${SchoolUnit.entryUUID}"  
    },
    "groups": [{
        "value": "${StudentGroup.entryUUID}",
        "$ref": "StudentGroups/${StudentGroup.entryUUID}"
    }],
    "teachers": [
        ${for $m in Employment.entryUUID}
        {
            "value": "${$m}",
            "$ref": "Employments/${$m}"
            
        },
        ${end}
    ]
}
?>
