# Configuration file for Activity objects

# A generated type
# This doesn't exist in the catalogue so it needs to be created on the fly.
# Each StudentGroup becomes an Activity.

Activity-scim-url-endpoint = Activities

Activity-is-generated = true

# The type to generate activities for,
# we generate one Activity per StudentGroup
Activity-generate-type = StudentGroup

# We need to find the other part, the Employment,
# to get its UUID and the other info for it.
# For each StudentGroup, we'll go through all Teachers UUIDs
# and find Employments with matching Teacher UUIDs.
Activity-remote-relation-id = Teacher.GUID

# Employment, unique identifier i.e. other part id
Activity-generate-remote-part = Employment.GUID

# Activity is based on StudentGroup so "this" or "local" is the StudentGroup.
# So Activity local relation id is StudentGroup and its unique identifier, e.g. GUID
Activity-generate-local-part = StudentGroup.GUID

# Name of the attribute holding the Activity unique id,
# this is used when creating the scim message below.
Activity-unique-identifier = GUID

# The 2 attributes used to generate this type's unique id.
Activity-GUID-generation-ids = StudentGroup.GUID SchoolUnit.GUID

Activity-scim-json-template = <?
{
    "schemas": ["urn:scim:schemas:extension:sis:school:1.0:Activity"],
    "externalId": "${GUID}",
    "displayName": "${StudentGroup.groupName}-Activity",
    "owner": {
        "value": "${SchoolUnit.GUID}",
        "$ref": "SchoolUnits/${SchoolUnit.GUID}"  
    },
    "groups": [{
        "value": "${StudentGroup.GUID}",
        "$ref": "StudentGroups/${StudentGroup.GUID}"
    }],
    "teachers": [
        ${for $m in Employment.GUID}
        {
            "value": "${$m}",
            "$ref": "Employments/${$m}"
            
        },
        ${end}
    ]
}
?>
